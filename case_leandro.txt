------------------------------------------------------------------*
*& Include          ZSAPMZMJN09_CASE_F01
*&---------------------------------------------------------------------*

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  USER_OK_TC                                               *
*&---------------------------------------------------------------------*
 FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
                          P_TABLE_NAME
                          P_MARK_NAME
                 CHANGING P_OK      LIKE SY-UCOMM.

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA: L_OK              TYPE SY-UCOMM,
         L_OFFSET          TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&SPWIZARD: Table control specific operations                          *
*&SPWIZARD: evaluate TC name and operations                            *
   SEARCH P_OK FOR P_TC_NAME.
   IF SY-SUBRC <> 0.
     EXIT.
   ENDIF.
   L_OFFSET = STRLEN( P_TC_NAME ) + 1.
   L_OK = P_OK+L_OFFSET.
*&SPWIZARD: execute general and TC specific operations                 *
   CASE L_OK.
     WHEN 'INSR'.                      "insert row
       PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
                                         P_TABLE_NAME.
       CLEAR P_OK.

     WHEN 'DELE'.                      "delete row
       PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
                                         P_TABLE_NAME
                                         P_MARK_NAME.
       CLEAR P_OK.

     WHEN 'P--' OR                     "top of list
          'P-'  OR                     "previous page
          'P+'  OR                     "next page
          'P++'.                       "bottom of list
       PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
                                             L_OK.
       CLEAR P_OK.
*     WHEN 'L--'.                       "total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN 'L-'.                        "column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN 'R+'.                        "column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN 'R++'.                       "total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
     WHEN 'MARK'.                      "mark all filled lines
       PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
                                         P_TABLE_NAME
                                         P_MARK_NAME   .
       CLEAR P_OK.

     WHEN 'DMRK'.                      "demark all filled lines
       PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                           P_TABLE_NAME
                                           P_MARK_NAME .
       CLEAR P_OK.

*     WHEN 'SASCEND'   OR
*          'SDESCEND'.                  "sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

   ENDCASE.

 ENDFORM.                              " USER_OK_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_INSERT_ROW                                         *
*&---------------------------------------------------------------------*
 FORM fcode_insert_row
               USING    P_TC_NAME           TYPE DYNFNAM
                        P_TABLE_NAME             .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_LINES_NAME       LIKE FELD-NAME.
   DATA L_SELLINE          LIKE SY-STEPL.
   DATA L_LASTLINE         TYPE I.
   DATA L_LINE             TYPE I.
   DATA L_TABLE_NAME       LIKE FELD-NAME.
   FIELD-SYMBOLS <TC>                 TYPE CXTAB_CONTROL.
   FIELD-SYMBOLS <TABLE>              TYPE STANDARD TABLE.
   FIELD-SYMBOLS <LINES>              TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: get looplines of TableControl                              *
   CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_LINES_NAME.
   ASSIGN (L_LINES_NAME) TO <LINES>.

*&SPWIZARD: get current line                                           *
   GET CURSOR LINE L_SELLINE.
   IF SY-SUBRC <> 0.                   " append line to table
     L_SELLINE = <TC>-LINES + 1.
*&SPWIZARD: set top line                                               *
     IF L_SELLINE > <LINES>.
       <TC>-TOP_LINE = L_SELLINE - <LINES> + 1 .
     ELSE.
       <TC>-TOP_LINE = 1.
     ENDIF.
   ELSE.                               " insert line into table
     L_SELLINE = <TC>-TOP_LINE + L_SELLINE - 1.
     L_LASTLINE = <TC>-TOP_LINE + <LINES> - 1.
   ENDIF.
*&SPWIZARD: set new cursor line                                        *
   L_LINE = L_SELLINE - <TC>-TOP_LINE + 1.

*&SPWIZARD: insert initial line                                        *
   INSERT INITIAL LINE INTO <TABLE> INDEX L_SELLINE.
   <TC>-LINES = <TC>-LINES + 1.
*&SPWIZARD: set cursor                                                 *
   SET CURSOR 1 L_LINE.

 ENDFORM.                              " FCODE_INSERT_ROW

*&---------------------------------------------------------------------*
*&      Form  FCODE_DELETE_ROW                                         *
*&---------------------------------------------------------------------*
 FORM fcode_delete_row
               USING    P_TC_NAME           TYPE DYNFNAM
                        P_TABLE_NAME
                        P_MARK_NAME   .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_TABLE_NAME       LIKE FELD-NAME.

   FIELD-SYMBOLS <TC>         TYPE cxtab_control.
   FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
   FIELD-SYMBOLS <WA>.
   FIELD-SYMBOLS <MARK_FIELD>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: delete marked lines                                        *
   DESCRIBE TABLE <TABLE> LINES <TC>-LINES.

   LOOP AT <TABLE> ASSIGNING <WA>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

     IF <MARK_FIELD> = 'X'.
       DELETE <TABLE> INDEX SYST-TABIX.
       IF SY-SUBRC = 0.
         <TC>-LINES = <TC>-LINES - 1.
       ENDIF.
     ENDIF.
   ENDLOOP.

 ENDFORM.                              " FCODE_DELETE_ROW

*&---------------------------------------------------------------------*
*&      Form  COMPUTE_SCROLLING_IN_TC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*      -->P_OK       ok code
*----------------------------------------------------------------------*
 FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
                                       P_OK.
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_TC_NEW_TOP_LINE     TYPE I.
   DATA L_TC_NAME             LIKE FELD-NAME.
   DATA L_TC_LINES_NAME       LIKE FELD-NAME.
   DATA L_TC_FIELD_NAME       LIKE FELD-NAME.

   FIELD-SYMBOLS <TC>         TYPE cxtab_control.
   FIELD-SYMBOLS <LINES>      TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO <TC>.
*&SPWIZARD: get looplines of TableControl                              *
   CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_TC_LINES_NAME.
   ASSIGN (L_TC_LINES_NAME) TO <LINES>.


*&SPWIZARD: is no line filled?                                         *
   IF <TC>-LINES = 0.
*&SPWIZARD: yes, ...                                                   *
     L_TC_NEW_TOP_LINE = 1.
   ELSE.
*&SPWIZARD: no, ...                                                    *
     CALL FUNCTION 'SCROLLING_IN_TABLE'
          EXPORTING
               ENTRY_ACT             = <TC>-TOP_LINE
               ENTRY_FROM            = 1
               ENTRY_TO              = <TC>-LINES
               LAST_PAGE_FULL        = 'X'
               LOOPS                 = <LINES>
               OK_CODE               = P_OK
               OVERLAPPING           = 'X'
          IMPORTING
               ENTRY_NEW             = L_TC_NEW_TOP_LINE
          EXCEPTIONS
*              NO_ENTRY_OR_PAGE_ACT  = 01
*              NO_ENTRY_TO           = 02
*              NO_OK_CODE_OR_PAGE_GO = 03
               OTHERS                = 0.
   ENDIF.

*&SPWIZARD: get actual tc and column                                   *
   GET CURSOR FIELD L_TC_FIELD_NAME
              AREA  L_TC_NAME.

   IF SYST-SUBRC = 0.
     IF L_TC_NAME = P_TC_NAME.
*&SPWIZARD: et actual column                                           *
       SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
     ENDIF.
   ENDIF.

*&SPWIZARD: set the new top line                                       *
   <TC>-TOP_LINE = L_TC_NEW_TOP_LINE.


 ENDFORM.                              " COMPUTE_SCROLLING_IN_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_MARK_LINES
*&---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_MARK_LINES USING P_TC_NAME
                               P_TABLE_NAME
                               P_MARK_NAME.
*&SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <WA>.
  FIELD-SYMBOLS <MARK_FIELD>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: mark all filled lines                                      *
  LOOP AT <TABLE> ASSIGNING <WA>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

     <MARK_FIELD> = 'X'.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_DEMARK_LINES
*&---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                 P_TABLE_NAME
                                 P_MARK_NAME .
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <WA>.
  FIELD-SYMBOLS <MARK_FIELD>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: demark all filled lines                                    *
  LOOP AT <TABLE> ASSIGNING <WA>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

     <MARK_FIELD> = SPACE.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines
*&---------------------------------------------------------------------*
*& Form f_CALCULAR
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_CALCULAR .



CALL FUNCTION 'Z_LIB_CONV_PESO'
  EXPORTING
    i_material              = W_TABELA-MATERIAL
    i_peso                  = W_TABELA-PESO
    i_medida                = W_TABELA-unidade_de_peso
 IMPORTING
   O_PESO_EM_KG            = W_TABELA-PESO
 EXCEPTIONS
   ERRO_AO_CONVERTER       = 1
   OTHERS                  = 2
          .
   W_TABELA-unidade_de_peso = 'KG'.
IF sy-subrc <> 0.
     MESSAGE 'Erro ao converter peso' TYPE 'E'.
ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form f_puxar
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_puxar .


LOOP AT T_TABELA INTO W_TABELA.

         IF W_TABELA-MATERIAL IS NOT INITIAL.
           CALL FUNCTION 'CONVERSION_EXIT_MATN1_INPUT'
             EXPORTING
               input              = W_TABELA-MATERIAL
            IMPORTING
              OUTPUT             = W_TABELA-MATERIAL.

           IF sy-subrc is not INITIAL.
           ENDIF.

SELECt
       makt~maktx,
       mara~meins,
       mara~brgew,
       mara~gewei,
       mara~mtart

  FROM mara
  INNER JOIN MAKT
  ON MAKT~MATNR = MARA~MATNR
  INTO TABLE @LT_DADOS
  WHERE MARA~MATNR = @W_TABELA-MATERIAL.
 IF SY-SUBRC IS INITIAL.

LOOP AT LT_dados INTO lw_dados.

  w_tabela-descricao              = lW_dados-MAKT.
  w_tabela-UNIDade_DE_medida      = lW_dados-MEINS.
  w_tabela-peso                   = lW_dados-BRGEW.
  w_tabela-unidade_de_peso        = lW_dados-GEWEI.
  w_tabela-tipo_do_material       = lW_dados-MTART.

MODIFY  t_tabela FROM W_TABELA.
            ENDLOOP.
             ENDIF.
           ENDIF.
endloop.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form F_EMBALAGEM
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_embalagem .
SELECT *
  from ztjn09_embalagem
  INTO TABLE t_embalagem.

  LOOP AT t_embalagem INTO W_embalagem.
  endloop.


READ TABLE t_embalagem into w_embalagem WITH key NOME_material = w_tabela-TIPO_DO_material.
 IF sy-subrc = 0.
 w_tabela-embalagem = abap_true.
  ENDIF.

IF 1 = 2.

ENDIF.
ENDFORM.



*
*                                          0000  T VA01
*SAPMV45A                                  0101  X
**                                          0000    BDC_OKCODE         =ENT2
*                                          0000    VBAK-AUART         zorb
*                                          0000    VBAK-VKORG         BR10
*                                          0000    VBAK-VTWEG         10
*                                          0000    VBAK-SPART         10
*SAPMV45A                                  4001  X
*                                          0000    BDC_OKCODE         =T\02
*                                          0000    VBKD-BSTKD         teste araujo
*                                          0000    KUAGV-KUNNR        771
*                                          0000    RV45A-KETDAT       20.04.2023
*                                          0000    RV45A-KPRGBZ       D
*                                          0000    VBKD-PRSDT         20.04.2023
*SAPMV45A                                  4001  X
*                                          0000    BDC_OKCODE         =SICH
*                                          0000    VBKD-BSTKD         teste araujo
*                                          0000    KUAGV-KUNNR        771
*                                          0000    KUWEV-KUNNR        771
*                                          0000    RV45A-KETDAT       20.04.2023
*                                          0000    RV45A-KPRGBZ       D
*                                          0000    RV45A-MABNR(01)    1041
*                                          0000    RV45A-KWMENG(01)                                                                                                                                       10
*&---------------------------------------------------------------------*
*& Form f_batch_input
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*& -->  p1        text
*& <--  p2        text
*&---------------------------------------------------------------------*
FORM f_batch_input .


  DATA : msgv2 type ZTJN09_DOCUMENTO-vbeln.
  DATA: lt_mensagens   TYPE TABLE OF BDCMSGCOLL.
  DATA: lw_mensagens   TYPE BDCMSGCOLL.


DATA: v_quant(10).

DATA: lt_batch_input TYPE TABLE OF bdcdata.
DATA: lw_batch_input TYPE bdcdata.

LOOP AT T_TABELA INTO W_TABELA.

v_quant = w_tabela-quantidade.

  CASE W_TABELA-MARK.
    WHEN ABAP_TRUE.

  lw_batch_input-program  = 'SAPMV45A'.
  lw_batch_input-dynpro   = '0101'.
  lw_batch_input-dynbegin = 'X'.
  lw_batch_input-fnam     = ''.
  lw_batch_input-fval     = ''.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'BDC_OKCODE'.
  lw_batch_input-fval     = '=ENT2'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'VBAK-AUART'.
  lw_batch_input-fval     = 'ZORB'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'VBAK-VKORG'.
  lw_batch_input-fval     = 'BR10'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'VBAK-VTWEG'.
  lw_batch_input-fval     = '10'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'VBAK-SPART'.
  lw_batch_input-fval     = '10'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = 'SAPMV45A'.
  lw_batch_input-dynpro   = '4001'.
  lw_batch_input-dynbegin = 'X'.
  lw_batch_input-fnam     = ''.
  lw_batch_input-fval     = ''.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'BDC_OKCODE'.
  lw_batch_input-fval     = '=T\02'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'VBKD-BSTKD'.
  lw_batch_input-fval     = 'teste araujo'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'KUAGV-KUNNR'.
  lw_batch_input-fval     = '771'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = 'SAPMV45A'.
  lw_batch_input-dynpro   = '4001'.
  lw_batch_input-dynbegin = 'X'.
  lw_batch_input-fnam     = ''.
  lw_batch_input-fval     = ''.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'BDC_OKCODE'.
  lw_batch_input-fval     = '=SICH'.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'RV45A-MABNR(01)'.
  lw_batch_input-fval     = w_tabela-material.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

   lw_batch_input-program  = ''.
  lw_batch_input-dynpro   = ''.
  lw_batch_input-dynbegin = ''.
  lw_batch_input-fnam     = 'RV45A-KWMENG(01)'.
  lw_batch_input-fval     = v_quant.
  APPEND lw_batch_input TO lt_batch_input.
  CLEAR lw_batch_input.

  CALL TRANSACTION 'VA01' USING lt_batch_input MODE 'N'
  MESSAGES INTO lt_mensagens.
  CLEAR LT_BATCH_INPUT.

  IF sy-subrc is INITIAL.


    read table lt_mensagens into lw_mensagens
    with key msgid = 'V1' "Classe da mensagem de sucesso
             msgnr = 311. "Número da mensagem de sucesso

    if sy-subrc is INITIAL.


   wb_tabela-matnr = w_tabela-material.
   wb_tabela-vbeln = lw_mensagens-msgv2.
   wb_tabela-qtd_embalagens = v_quant.
   wb_tabela-unid_embalagem = 'UN'.
   wb_tabela-peso_real = w_tabela-peso.
   wb_tabela-unidade_de_peso   = w_tabela-unidade_de_peso.
   wb_tabela-data_criacao = sy-datum.

  APPEND wb_tabela to tb_tabela.


    MODIFY ZTJN09_DOCUMENTO FROM wb_TABELA.


  ENDIF.
  ELSE.

MESSAGE 'Ordem de vendas incorreta' TYPE 'S' DISPLAY LIKE 'E'.
ENDIF.
ENDCASE.
ENDLOOP.

ENDFORM.


***  V1311
*    V1320